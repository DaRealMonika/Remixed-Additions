---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mike.
--- DateTime: 04.08.18 18:14
---

local RPD = require "scripts/lib/commonClasses"
local actor = require "scripts/lib/actor"
local storage = require "scripts/lib/storage"
local mob = require "scripts/lib/mob"

local desertMobs = {"SandWorm","Skeleton","CactusMimic","Mummy","Husk"}
local desertMobChance = {SandWorm=0.01,Skeleton=0.5,CactusMimic=0.1,Mummy=0.7,Husk=1}
local mobAi = {"Wandering","Sleeping"}
local invalidTiles = {[0]=true,[4]=true,[5]=true,[6]=true,[10]=true,[12]=true,[13]=true,[16]=true,[25]=true,[26]=true,[35]=true,[36]=true,[41]=true,[43]=true,[44]=true,[45]=true,[46]=true}

local ShadowType = {Shadow=true,MazeShadow=true,DarkElemental=true,ShadowLord=true,Lich=true,DreadKnight=true,DeadKnight=true,DarkMage=true}
local IceType = {Kobold=true,IceElemental=true,KoboldIcemancer=true,ColdSpirit=true,IceGuardian=true,IceGuardianCore=true,IceMage=true}
local SpiderType = {SpiderMind=true,SpiderGuard=true,SpiderQueen=true,SpiderServant=true,SpiderExploding=true,SpiderMindAmber=true,UndeadSpiderMutant=true}
local FireType = {FireElemental=true,BurningFist=true,FireMage=true}

local function updateLatestDeadMob(deadMob)
    local level = RPD.Dungeon.level
    local name = deadMob:getEntityKind()
    local counterId = name .."Kills"
    local prevAmount = storage.get(counterId) or 0
    storage.put(counterId, prevAmount+1)
    if ShadowType[name] then
        if math.random(1,100) <= 8 then
            level:drop(RPD.ItemFactory:itemByName("SoulShard"), deadMob:getPos())
        end
    end
    if IceType[name] then
        if math.random(1,100) <= 8 then
            level:drop(RPD.ItemFactory:itemByName("IceGuardianCoreModule"), deadMob:getPos())
        end
    end
    if SpiderType[name] then
        if math.random(1,100) <= 8 then
            level:drop(RPD.ItemFactory:itemByName("SpiderQueenCarapace"), deadMob:getPos())
        end
    end
    if FireType[name] then
        if math.random(1,100) <= 8 then
            level:drop(RPD.ItemFactory:itemByName("FrozenFlame"), deadMob:getPos())
        end
    end
end

mob.installOnDieCallback(updateLatestDeadMob)

return actor.init({
    act = function()
        local hero = RPD.Dungeon.hero
        local level = RPD.Dungeon.level
        local mob
        local pos = math.random(level:getLength())-1
        local chance = math.random(0.01,1)
        if --[[math.random(1,100) <= 16 and ]]not invalidTiles[level.map[pos]] and level:distance(pos, hero:getPos()) > 7 then
            if chance == desertMobChance[desertMobs[1]] then
                mob = RPD.MobFactory:mobByName(desertMobs[1])
                RPD.setAi(mob, mobAi[math.random(1,#mobAi)])
                level:spawnMob(mob)
                RPD.glogp(desertMobs[1].." has spawned at "..tostring(pos)..".")
            end
            if chance == desertMobChance[desertMobs[2]] then
                mob = RPD.MobFactory:mobByName(desertMobs[2])
                RPD.setAi(mob, mobAi[math.random(1,#mobAi)])
                level:spawnMob(mob)
                RPD.glogp(desertMobs[2].." has spawned at "..tostring(pos)..".")
            end
            if chance == desertMobChance[desertMobs[3]] then
                mob = RPD.MobFactory:mobByName(desertMobs[3])
                RPD.setAi(mob, mobAi[math.random(1,#mobAi)])
                level:spawnMob(mob)
                RPD.glogp(desertMobs[3].." has spawned at "..tostring(pos)..".")
            end
            if chance == desertMobChance[desertMobs[4]] then
                mob = RPD.MobFactory:mobByName(desertMobs[4])
                RPD.setAi(mob, mobAi[math.random(1,#mobAi)])
                level:spawnMob(mob)
                RPD.glogp(desertMobs[4].." has spawned at "..tostring(pos)..".")
            end
            if chance == desertMobChance[desertMobs[5]] then
                mob = RPD.MobFactory:mobByName(desertMobs[5])
                RPD.setAi(mob, mobAi[math.random(1,#mobAi)])
                level:spawnMob(mob)
                RPD.glogp(desertMobs[5].." has spawned at "..tostring(pos)..".")
            end
        end
        RPD.glog(desertMobs[1]..": "..tostring(desertMobChance[desertMobs[1]])..".")
        RPD.glogp(desertMobs[2]..": "..tostring(desertMobChance[desertMobs[2]])..".")
        RPD.glogn(desertMobs[3]..": "..tostring(desertMobChance[desertMobs[3]])..".")
        RPD.glog(desertMobs[4]..": "..tostring(desertMobChance[desertMobs[4]])..".")
        RPD.glogp(desertMobs[5]..": "..tostring(desertMobChance[desertMobs[5]])..".")
        RPD.glogn(tostring(pos).." is "..tostring(level:distance(pos, hero:getPos())).." from you.")
        RPD.glog("Chance: "..tostring(chance)..".")
        return true
    end,
    actionTime = function()
        return 1
    end,
    activate = function()
        local level = RPD.Dungeon.level
        local hero = RPD.Dungeon.hero
        local levelSize = RPD.Dungeon.level:getLength()
        for i = 0 , levelSize - 1 do
            local emitter = RPD.Sfx.CellEmitter:get(i)
            emitter:pour(RPD.Sfx.WindParticle.FACTORY, 16)
        end
        for i = 0, level:getLength() do
            local target = RPD.Actor:findChar(i)
            if target then
                if target ~= hero then
                    if target:hp() < 0 then
                        target:hp(1)
                    end
                end
            end
        end
    end
})